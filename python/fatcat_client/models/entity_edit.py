# coding: utf-8

"""
    fatcat

    A scalable, versioned, API-oriented catalog of bibliographic entities and file metadata  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EntityEdit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edit_id': 'int',
        'ident': 'str',
        'revision': 'int',
        'redirect_ident': 'str',
        'editgroup_id': 'int',
        'extra': 'object'
    }

    attribute_map = {
        'edit_id': 'edit_id',
        'ident': 'ident',
        'revision': 'revision',
        'redirect_ident': 'redirect_ident',
        'editgroup_id': 'editgroup_id',
        'extra': 'extra'
    }

    def __init__(self, edit_id=None, ident=None, revision=None, redirect_ident=None, editgroup_id=None, extra=None):  # noqa: E501
        """EntityEdit - a model defined in Swagger"""  # noqa: E501

        self._edit_id = None
        self._ident = None
        self._revision = None
        self._redirect_ident = None
        self._editgroup_id = None
        self._extra = None
        self.discriminator = None

        self.edit_id = edit_id
        self.ident = ident
        if revision is not None:
            self.revision = revision
        if redirect_ident is not None:
            self.redirect_ident = redirect_ident
        self.editgroup_id = editgroup_id
        if extra is not None:
            self.extra = extra

    @property
    def edit_id(self):
        """Gets the edit_id of this EntityEdit.  # noqa: E501


        :return: The edit_id of this EntityEdit.  # noqa: E501
        :rtype: int
        """
        return self._edit_id

    @edit_id.setter
    def edit_id(self, edit_id):
        """Sets the edit_id of this EntityEdit.


        :param edit_id: The edit_id of this EntityEdit.  # noqa: E501
        :type: int
        """
        if edit_id is None:
            raise ValueError("Invalid value for `edit_id`, must not be `None`")  # noqa: E501

        self._edit_id = edit_id

    @property
    def ident(self):
        """Gets the ident of this EntityEdit.  # noqa: E501


        :return: The ident of this EntityEdit.  # noqa: E501
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident):
        """Sets the ident of this EntityEdit.


        :param ident: The ident of this EntityEdit.  # noqa: E501
        :type: str
        """
        if ident is None:
            raise ValueError("Invalid value for `ident`, must not be `None`")  # noqa: E501

        self._ident = ident

    @property
    def revision(self):
        """Gets the revision of this EntityEdit.  # noqa: E501


        :return: The revision of this EntityEdit.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this EntityEdit.


        :param revision: The revision of this EntityEdit.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def redirect_ident(self):
        """Gets the redirect_ident of this EntityEdit.  # noqa: E501


        :return: The redirect_ident of this EntityEdit.  # noqa: E501
        :rtype: str
        """
        return self._redirect_ident

    @redirect_ident.setter
    def redirect_ident(self, redirect_ident):
        """Sets the redirect_ident of this EntityEdit.


        :param redirect_ident: The redirect_ident of this EntityEdit.  # noqa: E501
        :type: str
        """

        self._redirect_ident = redirect_ident

    @property
    def editgroup_id(self):
        """Gets the editgroup_id of this EntityEdit.  # noqa: E501


        :return: The editgroup_id of this EntityEdit.  # noqa: E501
        :rtype: int
        """
        return self._editgroup_id

    @editgroup_id.setter
    def editgroup_id(self, editgroup_id):
        """Sets the editgroup_id of this EntityEdit.


        :param editgroup_id: The editgroup_id of this EntityEdit.  # noqa: E501
        :type: int
        """
        if editgroup_id is None:
            raise ValueError("Invalid value for `editgroup_id`, must not be `None`")  # noqa: E501

        self._editgroup_id = editgroup_id

    @property
    def extra(self):
        """Gets the extra of this EntityEdit.  # noqa: E501


        :return: The extra of this EntityEdit.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this EntityEdit.


        :param extra: The extra of this EntityEdit.  # noqa: E501
        :type: object
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityEdit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
