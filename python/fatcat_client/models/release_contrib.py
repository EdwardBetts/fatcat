# coding: utf-8

"""
    fatcat

    A scalable, versioned, API-oriented catalog of bibliographic entities and file metadata  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReleaseContrib(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'creator_id': 'str',
        'raw_name': 'str',
        'extra': 'object',
        'role': 'str'
    }

    attribute_map = {
        'index': 'index',
        'creator_id': 'creator_id',
        'raw_name': 'raw_name',
        'extra': 'extra',
        'role': 'role'
    }

    def __init__(self, index=None, creator_id=None, raw_name=None, extra=None, role=None):  # noqa: E501
        """ReleaseContrib - a model defined in Swagger"""  # noqa: E501

        self._index = None
        self._creator_id = None
        self._raw_name = None
        self._extra = None
        self._role = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if creator_id is not None:
            self.creator_id = creator_id
        if raw_name is not None:
            self.raw_name = raw_name
        if extra is not None:
            self.extra = extra
        if role is not None:
            self.role = role

    @property
    def index(self):
        """Gets the index of this ReleaseContrib.  # noqa: E501


        :return: The index of this ReleaseContrib.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ReleaseContrib.


        :param index: The index of this ReleaseContrib.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def creator_id(self):
        """Gets the creator_id of this ReleaseContrib.  # noqa: E501


        :return: The creator_id of this ReleaseContrib.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ReleaseContrib.


        :param creator_id: The creator_id of this ReleaseContrib.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def raw_name(self):
        """Gets the raw_name of this ReleaseContrib.  # noqa: E501


        :return: The raw_name of this ReleaseContrib.  # noqa: E501
        :rtype: str
        """
        return self._raw_name

    @raw_name.setter
    def raw_name(self, raw_name):
        """Sets the raw_name of this ReleaseContrib.


        :param raw_name: The raw_name of this ReleaseContrib.  # noqa: E501
        :type: str
        """

        self._raw_name = raw_name

    @property
    def extra(self):
        """Gets the extra of this ReleaseContrib.  # noqa: E501


        :return: The extra of this ReleaseContrib.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this ReleaseContrib.


        :param extra: The extra of this ReleaseContrib.  # noqa: E501
        :type: object
        """

        self._extra = extra

    @property
    def role(self):
        """Gets the role of this ReleaseContrib.  # noqa: E501


        :return: The role of this ReleaseContrib.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ReleaseContrib.


        :param role: The role of this ReleaseContrib.  # noqa: E501
        :type: str
        """

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseContrib):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
