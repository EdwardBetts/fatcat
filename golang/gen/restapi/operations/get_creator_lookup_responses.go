// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.archive.org/bnewbold/fatcat/golang/gen/models"
)

// GetCreatorLookupOKCode is the HTTP code returned for type GetCreatorLookupOK
const GetCreatorLookupOKCode int = 200

/*GetCreatorLookupOK find a single creator by external identifer

swagger:response getCreatorLookupOK
*/
type GetCreatorLookupOK struct {

	/*
	  In: Body
	*/
	Payload *models.CreatorEntity `json:"body,omitempty"`
}

// NewGetCreatorLookupOK creates GetCreatorLookupOK with default headers values
func NewGetCreatorLookupOK() *GetCreatorLookupOK {

	return &GetCreatorLookupOK{}
}

// WithPayload adds the payload to the get creator lookup o k response
func (o *GetCreatorLookupOK) WithPayload(payload *models.CreatorEntity) *GetCreatorLookupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get creator lookup o k response
func (o *GetCreatorLookupOK) SetPayload(payload *models.CreatorEntity) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreatorLookupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCreatorLookupNotFoundCode is the HTTP code returned for type GetCreatorLookupNotFound
const GetCreatorLookupNotFoundCode int = 404

/*GetCreatorLookupNotFound no such creator

swagger:response getCreatorLookupNotFound
*/
type GetCreatorLookupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCreatorLookupNotFound creates GetCreatorLookupNotFound with default headers values
func NewGetCreatorLookupNotFound() *GetCreatorLookupNotFound {

	return &GetCreatorLookupNotFound{}
}

// WithPayload adds the payload to the get creator lookup not found response
func (o *GetCreatorLookupNotFound) WithPayload(payload *models.Error) *GetCreatorLookupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get creator lookup not found response
func (o *GetCreatorLookupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreatorLookupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetCreatorLookupDefault generic error response

swagger:response getCreatorLookupDefault
*/
type GetCreatorLookupDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCreatorLookupDefault creates GetCreatorLookupDefault with default headers values
func NewGetCreatorLookupDefault(code int) *GetCreatorLookupDefault {
	if code <= 0 {
		code = 500
	}

	return &GetCreatorLookupDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get creator lookup default response
func (o *GetCreatorLookupDefault) WithStatusCode(code int) *GetCreatorLookupDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get creator lookup default response
func (o *GetCreatorLookupDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get creator lookup default response
func (o *GetCreatorLookupDefault) WithPayload(payload *models.Error) *GetCreatorLookupDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get creator lookup default response
func (o *GetCreatorLookupDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCreatorLookupDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
