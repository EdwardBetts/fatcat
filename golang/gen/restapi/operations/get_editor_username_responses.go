// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "git.archive.org/bnewbold/fatcat/golang/gen/models"
)

// GetEditorUsernameOKCode is the HTTP code returned for type GetEditorUsernameOK
const GetEditorUsernameOKCode int = 200

/*GetEditorUsernameOK fetch generic information about an editor

swagger:response getEditorUsernameOK
*/
type GetEditorUsernameOK struct {

	/*
	  In: Body
	*/
	Payload *models.Editor `json:"body,omitempty"`
}

// NewGetEditorUsernameOK creates GetEditorUsernameOK with default headers values
func NewGetEditorUsernameOK() *GetEditorUsernameOK {

	return &GetEditorUsernameOK{}
}

// WithPayload adds the payload to the get editor username o k response
func (o *GetEditorUsernameOK) WithPayload(payload *models.Editor) *GetEditorUsernameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get editor username o k response
func (o *GetEditorUsernameOK) SetPayload(payload *models.Editor) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEditorUsernameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetEditorUsernameNotFoundCode is the HTTP code returned for type GetEditorUsernameNotFound
const GetEditorUsernameNotFoundCode int = 404

/*GetEditorUsernameNotFound username not found

swagger:response getEditorUsernameNotFound
*/
type GetEditorUsernameNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEditorUsernameNotFound creates GetEditorUsernameNotFound with default headers values
func NewGetEditorUsernameNotFound() *GetEditorUsernameNotFound {

	return &GetEditorUsernameNotFound{}
}

// WithPayload adds the payload to the get editor username not found response
func (o *GetEditorUsernameNotFound) WithPayload(payload *models.Error) *GetEditorUsernameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get editor username not found response
func (o *GetEditorUsernameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEditorUsernameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetEditorUsernameDefault generic error response

swagger:response getEditorUsernameDefault
*/
type GetEditorUsernameDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetEditorUsernameDefault creates GetEditorUsernameDefault with default headers values
func NewGetEditorUsernameDefault(code int) *GetEditorUsernameDefault {
	if code <= 0 {
		code = 500
	}

	return &GetEditorUsernameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get editor username default response
func (o *GetEditorUsernameDefault) WithStatusCode(code int) *GetEditorUsernameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get editor username default response
func (o *GetEditorUsernameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get editor username default response
func (o *GetEditorUsernameDefault) WithPayload(payload *models.Error) *GetEditorUsernameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get editor username default response
func (o *GetEditorUsernameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetEditorUsernameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
